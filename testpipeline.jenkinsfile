def getCloudRegions() {
  // Environmental variables are passed specifically for the test environment, this
  // must be set
  def changeProjectProcess = ["python", "manage.py", "runscript", "set-environment",
    "--script-args", "environment=test"].execute(null, new File("/root/saas_portal"))
  changeProjectProcess.waitForOrKill(100000)

  def process = ["/root/google-cloud-sdk/bin/gcloud", "compute", "regions",
    "list", "--format=table[no-heading](NAME)"].execute()
  process.waitForOrKill(10000)
  return process.in.text.trim()
}

def regionChoices = getCloudRegions()

pipeline {
agent any
    options {
      disableConcurrentBuilds()
    }

  parameters {
    booleanParam(name: 'refresh', defaultValue: false, description: 'Read Jenkinsfile and exit.')
    string(name: 'deployment', description:  'What is the deployment name?')
    choice(choices: regionChoices, name: 'region', description: 'What is the region name?')
    choice(choices: 'test\nprod', name: 'environment', description: 'What environment type?')
  }

  stages {
    stage('Read Jenkinsfile') {
      when {
        expression {
          return params.refresh == true
        }
      }
      steps {
        echo("Ended pipeline early.")
      }
    }
    stage('Get administrative password') {
      when {
        expression {
          return params.refresh == false
        }
      }
      steps {
          echo "Successfully finished"
      }
    }
  }

  post {
    always {
      cleanWs()
      sh "rm -rf /tmp/*"
    }
  }
}
